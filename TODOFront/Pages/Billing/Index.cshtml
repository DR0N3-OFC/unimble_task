@page
@using System.Text.RegularExpressions;
@model TODOFront.Pages.Billing.IndexModel
@{
    ViewData["Title"] = "Unimble Task - Cobrança";
}

<head>
    <link rel="stylesheet" href="~/css/billings/index.css" type="text/css" />
</head>

<div class="wrapper">
    @if(Model.Billing?.TxID != null)
    {
        <div class="details-container">
            <h2>Gostou do Unimble Task?</h2>
            <p>Conclua a operação de assinatura e adicione quantas tarefas quiser por apenas R$0,01.</p>

            <h4>Detalhes da Cobrança PIX</h4>

            <div class="details">
                <strong>Nome:</strong> @Model.Billing.FullName<br>
                <strong>CPF:</strong> @Regex.Replace(Model.Billing.CPF!, @"(\d{3})(\d{3})(\d{3})(\d{2})", "$1.$2.$3-$4")<br>
                <strong>Valor:</strong> R$@Model.Billing.Value<br>
                <strong>Validade:</strong> @Model.Billing.Deadline?.ToString("dd/MM/yyyy HH:mm")<br>
            </div>

            <div class="qr-code">
                <img src="@Model.QRCode" alt="QR Code PIX">
                <button type="button" class="btn btn-primary" onclick="copyToClipboard('@Model.PixCode')"
                    data-toggle="popover"
                    data-placement="top"
                    data-content="Código PIX copiado para a área de transferência.">
                    Copiar código PIX
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="form-container">
            <h2>Gostou do Unimble Task?</h2>
            <p class="text-center">Pague apenas R$0,01 para continuar usando sem restrições.</p>
            <hr>
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Billing!.FullName">Nome completo:</label>
                    <input asp-for="Billing!.FullName" type="text" class="form-control" onkeyup="handleText(event)">
                    <span asp-validation-for="Billing!.FullName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Billing!.CPF">CPF:</label>
                    <input asp-for="Billing!.CPF" type="text" class="form-control" oninput="handleCPFTyping(event)" maxlength="14" />
                    <span asp-validation-for="Billing!.CPF" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" class="btn btn-primary btn-block" value="Enviar" />
                    <a asp-page="/Index" class="btn btn-secondary btn-block">Cancelar</a>
                </div>
            </form>
        </div>
    }
</div>

<script>
    const lettersOnly = (value) => {
		const regex = /^[a-zA-ZÀ-ú\s'-]*$/;
		return regex.test(value) && !/\d/.test(value);
	}
	const handleText = (event) => {
		let input = event.target;
		let value = input.value;
		if (!lettersOnly(value)) {
			input.value = value.slice(0, -1);
		}
	}

    function handleCPFTyping(event) {
        let input = event.target;
        let cpf = input.value.replace(/\D/g, '');

        if (cpf.length <= 11) {
            cpf = cpf.replace(/(\d{3})(\d{0,3})(\d{0,3})(\d{0,2})/, function (match, p1, p2, p3, p4) {
                var parts = [p1, p2, p3];
                parts = parts.filter(function (part) { return part !== '' });
                return parts.join('.') + (p4 ? '-' + p4 : '');
            });

            input.value = cpf;
        }
    }

    function copyToClipboard(value) {
        var input = document.createElement('input');
        input.value = value;
        document.body.appendChild(input);
        input.select();
        document.execCommand('copy');
        document.body.removeChild(input);
    }

    $(document).ready(function () {
        $('[data-toggle="popover"]').popover();
    });
</script>